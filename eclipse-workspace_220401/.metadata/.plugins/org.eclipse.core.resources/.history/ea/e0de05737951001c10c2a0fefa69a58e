/*
 * MsgQueue.cpp
 *
 *  Created on: 2021. 11. 29.
 *      Author: hong
 */

#include "MsgQueue.h"

int m_uiPos =0;
int nLengthCnt =0;
int nDatalength =0;

msgform* m_pMsg;

MsgQueue:: MsgQueue(void)
{
	m_bExt =0;
	m_pMsg = NULL;
}
MsgQueue::~MsgQueue(void)
{
	Clear();
}

bool MsgQueue::PutByte(uint8_t* b)
{
	Vector<uint8_t> UartMsg_vec;
	int nLen =0;

	printf("PutByte\n");
	if(m_pMsg == NULL)
	{
		printf("m_pMsg NULL\n");
		m_pMsg = new msgform;
		m_pMsg->data = NULL;
		m_uiPos =0;
		m_bExt =0;
	}
	printf("PutByte11\n");
	//while(1) {

		switch (m_uiPos)
		{
		case 0:
			if(b[0] != STX)
				break;
			else {

				m_pMsg->stx = b[m_uiPos];
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message %x\r\n", m_pMsg->stx);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				nLengthCnt = 0;
			}
			m_uiPos++;
			break;
		case 1:
			m_pMsg->PanId[0] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->PanId[0]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 2:
			m_pMsg->PanId[1] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->PanId[1]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 3:
			m_pMsg->Daddr[0] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->Daddr[0]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 4:
			m_pMsg->Daddr[1] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->Daddr[1]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 5:
			m_pMsg->Saddr[0] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->Saddr[0]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 6:
			m_pMsg->Saddr[1] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->Saddr[1]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 7:
			m_pMsg->MsgType = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message %x\r\n", m_pMsg->MsgType);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 8:
			m_pMsg->Length[0] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message Length[0] %x\r\n", m_pMsg->Length[0]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		case 9:

			m_pMsg->Length[1] = b[m_uiPos];
			UartMsg_vec.push_back(b[m_uiPos]);
			printf("uart message Length[1] %x\r\n", m_pMsg->Length[1]);
			printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
			m_uiPos++;
			break;
		default :
			if(m_pMsg->data == NULL)
			{
				nDatalength = (int)(m_pMsg->Length[0] | m_pMsg->Length[1]);
				m_pMsg->data = new uint8_t[nDatalength];

				m_pMsg->data[nLengthCnt]= b[m_uiPos];
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message  m_pMsg->data[%d]  : %x\r\n", nLengthCnt, m_pMsg->data[nLengthCnt]);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				nLengthCnt++;
				m_uiPos++;
				break;
			}
			else if(nLengthCnt < nDatalength) {
				m_pMsg->data[nLengthCnt] = b[m_uiPos];
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message m_pMsg->data[%d] %x\r\n", nLengthCnt, m_pMsg->data[nLengthCnt]);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				nLengthCnt++;
				m_uiPos++;
				break;
			}

			if(nLengthCnt == nDatalength)
			{
				m_pMsg->Checksum = b[m_uiPos];
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message  Checksum %x\r\n", m_pMsg->Checksum );
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				nDatalength =0;
				m_uiPos++;
				break;
			}

			if(m_pMsg->ext[0] == b[m_uiPos]) {
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message  ext0 %x\r\n", b[m_uiPos]);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				m_uiPos++;
				break;
			}
			else if(m_pMsg->ext[1] == b[m_uiPos]) {
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message  ext1 %x\r\n", b[m_uiPos]);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				m_uiPos++;
				break;
			}
			else if(m_pMsg->ext[2] == b[m_uiPos]) {
				UartMsg_vec.push_back(b[m_uiPos]);
				printf("uart message  ext2 %x\r\n", b[m_uiPos]);
				printf("uart vector message %x\r\n", UartMsg_vec[m_uiPos]);
				m_bExt =1;
				break;
			}

		}

		if(m_bExt)	{
			nLen = UartMsg_vec.size();
			printf("uart message  nLen %d\r\n", nLen);
			m_pMsg = NULL;
	//		break;
		}

	//}
	return 0;

}

void MsgQueue::Clear()
{
	if(m_pMsg)
	{
		if(m_pMsg->data)
			delete[] m_pMsg->data;
		delete m_pMsg;
		m_pMsg = NULL;
	}
	m_uiPos =0;
}




