/*
 * uart.cpp
 *
 *  Created on: 2021. 11. 29.
 *      Author: hong
 */

#include "uart.h"
#include <thread>
#include <sstream>

#define BUF_MAX 512

using namespace std;
int fd =0;
int ii = 0;
int iTimerFlag =0;
int nToTalLen = 0, nToTalLen2 =0;
pthread_t mthreads;

MsgQueue* pMsgQueue;

UartComThread* mpComm;
uint8_t buf[BUF_MAX];
uint8_t rx_Putbyte[1024];

pthread_mutex_t mutex2;

UartComThread::UartComThread()
{
	m_uartd = 0;
	m_grun =0;
	bWorkingUart =0;
	m_iUartRetry =0;
	pMsgQueue = NULL;
	m_p8uUartData = NULL;
}

UartComThread::~UartComThread()
{
}

#define reset_buffer() memset(rx,0,sizeof(char)*1024)


static void *uart_Rx_Thread(void *param)
{
   UartComThread* pComm = NULL;
   pComm = (UartComThread* )mpComm;
	int uartd = (int)param;
	int len =0, underflowcnt =0;;
	int nSecondPutByte =0, nPutBuffCnt =0;
	int iflagContinue =0;
	uart_ctx_t* ctx = (uart_ctx_t *)uartd;
	uint8_t* rx = (uint8_t *)malloc(sizeof(uint8_t)*1024);
	uint8_t* rx2 = (uint8_t *)malloc(sizeof(uint8_t)*1024);
	uint8_t* rx_sto = (uint8_t *)malloc(sizeof(uint8_t)*1024);
	uint8_t* rx_sto2 = (uint8_t *)malloc(sizeof(uint8_t)*1024);
	int sto_count2 =0;

	while(1) {
		if(pComm->Ready_to_Read(uartd,0)) {			

			pthread_mutex_lock(&ctx->mutex);
			len = pComm->Uart_Read(uartd, rx2, 1024);
			nToTalLen += len;
			
			for(int i=nToTalLen2; i<nToTalLen; i++) {
				pComm->AppendArray(rx2[i], i, rx);
				prtinf("%x "rx[i]);
			}
			printf("\n");
			pthread_mutex_unlock(&ctx->mutex);

			
			printf("\n***************uart_Rx_Thread uart **********%d*********\n", len);
			for(int i=0; i<= nToTalLen; i++) {				
				if( (rx[0] == STX) && (rx[i-3] == 0xa5) && (rx[i-2] == 0x5a) && (rx[i-1] == 0x7e) ) {
					underflowcnt =0;
					if(rx[i-4] != pComm->Uart_GetChecksum(rx ,i)) {
						printf("Uart Checksum Error \n");
						break;
					}
					if(pMsgQueue->PutByte(rx2, i) != 1) {
						printf("putbyte return 0\n");
					}
					
					if(i < nToTalLen) {
						printf("%d < %d\n", i, nToTalLen);
						for(int j=0; j<i; j++) {
							pComm->Uart_deleteArray(j, 1024, rx)
						}
						underflowcnt = 1;
						nToTalLen2 = i;
						nToTalLen = nToTalLen -i;
					}
					else if(i == nToTalLen) {
						printf("%d == %d\n", i, nToTalLen);
						nToTalLen =0;
						nToTalLen2 =0;
						break;
					}
				}
			}

			if(underflowcnt) {
				printf("Continue\n");
				continue;
			}

		
		/*	if(iflagContinue) {
				for(int i=0; i<len; i++)
					pComm->AppendArray(rx2[i], i+1, rx_Putbyte);
					printf("rx2[%d] :%x ",rx2[i]);
				}
				printf("\n");
			}*/
#if 0
			nToTalLen += len;

			if((len < 15) && (underflowcnt == 0) ) {
				pComm->m_iUartRetry =1;
				printf("Read Buffer underflow... Retry\n");
				if( (len <= 1) &&(rx2[0] != 0xaa) ) {
					nToTalLen =0;
					memset(rx2, 0, sizeof(char)*1024);
					printf("memset len %d == 1\n", len);
				}
				for(int i=0; i<len; i++) {
					rx[underflowcnt] = rx2[i];
					printf("%x[%d] ", rx[underflowcnt], underflowcnt);
					underflowcnt++;
				}
				if(rx[0] == 0) {
					memset(rx2, 0, sizeof(char)*1024);
					printf("(rx[0] == %x)\n", rx[0]);
					underflowcnt =0;
					continue;
				}
				if( (underflowcnt <=1) ||(rx[underflowcnt-3] != 0xa5) || (rx[underflowcnt-2] != 0x5a) || (rx[underflowcnt-1] != 0x7e) ) {
					printf("continue\n");
					memset(rx2, 0, sizeof(char)*1024);
					continue;
				}
			}
			else if( (len < 16) && (underflowcnt == 0) && (rx2[MSGTYPE]==DATA_ACKNOWLEDGEMENT) ) {
				pComm->m_iUartRetry =1;
				printf("Read Buffer underflow...DATA_ACKNOWLEDGEMENT Retry\n");
				for(int i=0; i<len; i++) {
					rx[underflowcnt] = rx2[i];
					printf("%x ", rx[underflowcnt]);
					underflowcnt++;
				}
				if( (rx[underflowcnt-3] != 0xa5) || (rx[underflowcnt-2] != 0x5a) || (rx[underflowcnt-1] != 0x7e) ) {
					printf("continue\n");
					memset(rx2, 0, sizeof(char)*1024);
					continue;
				}
			}

			if(underflowcnt > 0) {
				printf("Read Buffer underflow, underflowcnt %d / nToTalLen %d\n",underflowcnt, nToTalLen);
				for(int i=0; i<=len; i++) {
					rx[underflowcnt] = rx2[i];
					printf("%x ", rx[underflowcnt]);
					underflowcnt++;
				}
				printf(" End\n");
				memcpy(rx_Putbyte, rx, underflowcnt+1);
				underflowcnt =0;
			}
			else if(underflowcnt <= 0) {
				memcpy(rx_Putbyte, rx2, nToTalLen);
			}
			printf("nToTalLen %d\n", nToTalLen);
#else				
#endif
			while(nPutBuffCnt < nToTalLen) {
				rx_sto[nPutBuffCnt] = rx_Putbyte[nPutBuffCnt];
				printf("(%x) ", rx_sto[nPutBuffCnt]);
				nPutBuffCnt++;
				if( (rx_sto[0] == STX) && (rx_sto[nPutBuffCnt-3] == 0xa5) && (rx_sto[nPutBuffCnt-2] == 0x5a) && (rx_sto[nPutBuffCnt-1] == 0x7e) ) {
					printf("\n");

					if(nPutBuffCnt < nToTalLen ) {
						printf("nPutBuffCnt : %d < len: %d\n", nPutBuffCnt, nToTalLen);
						nSecondPutByte =1;
						if(pMsgQueue->PutByte(rx_sto,  nPutBuffCnt++) != 1) {
							printf("putbyte return 0\n");
						}
						ii = nPutBuffCnt;
						pComm->m_iUartRetry =0;
						break;
					}
					else if(nPutBuffCnt == nToTalLen){
						if(pMsgQueue->PutByte(rx_sto, nToTalLen) != 1) {
							printf("putbyte return 0\n");
						}
						pComm->m_iUartRetry =0;
						break;
					}
				}
			}
			printf("\n");
			if(nSecondPutByte) {
				ii--;
				while(ii < nToTalLen) {
					printf("##################################nSecondPutByte########################################\n");
					while(1) {
					//	printf("rx_Putbyte : %x[%d] \n", rx_Putbyte[ii], ii);				
						rx_sto2[sto_count2]= rx_Putbyte[ii];
						printf("(%x) ", rx_sto2[sto_count2]);
						
						if( (rx_sto2[0] == STX)&& (rx_sto2[sto_count2-3] == 0xa5) && (rx_sto2[sto_count2-2] == 0x5a) && (rx_sto2[sto_count2-1] == 0x7e) ) {
							printf("break;\n");
							break;
						}
						sto_count2++;
						ii++;
						if( (ii <= sto_count2) && (rx_sto2[sto_count2] == 0xaa) ) {
							printf("iflagContinue 1\n");
						//	iflagContinue =1;
							break;
						}
					}
					
					if( (rx_sto2[0] == STX) && (rx_sto2[sto_count2-3] == 0xa5) && (rx_sto2[sto_count2-2] == 0x5a) && (rx_sto2[sto_count2-1] == 0x7e) ) {
						printf("\n");
						if(pMsgQueue->PutByte(rx_sto2, sto_count2) != 1) {
							printf("putbyte return 0\n");
						}
						for(int i=0; i< sto_count2; i++) {
							pComm->deleteArray(i, 1024, rx_sto2);
						}
						sto_count2 =0;
						printf("ii :%d, nToTalLen: %d rx_sto2[0] : %x\n", ii, nToTalLen, rx_sto2[0]);
						pComm->m_iUartRetry =0;
					}

					if(ii == nToTalLen) {
						printf("##################################ii : %d\n", ii);
						break;
					}
				}
			}		
			ii =0;
			pComm->m_iUartRetry =0;
			reset_buffer();

			memset(rx_Putbyte, 0, sizeof(char)*1024);
			memset(rx_sto, 0, sizeof(char)*1024);
			memset(rx_sto2, 0, sizeof(char)*1024);
			sto_count2 =0;
			nPutBuffCnt =0;
			nToTalLen =0;
			nSecondPutByte =0;
		}
		usleep(100);
	}
	free(rx_sto);
	free(rx_sto2);
	free(rx);

	return 0;
}
void UartComThread::deleteArray(int idx, int size, BYTE* ar)
{
	memmove(ar+idx, ar+idx+1, size-idx);
}


void UartComThread::Exit_Uart_Thread()
{
	void *status;
	int ait, ret =0;

	ret = pthread_join(mthreads,&status);
	wait(&ait);

	printf("Uart Exit Thread , ");

	if(status == PTHREAD_CANCELED)
		printf("The thread was canceled - \n");
	else
		printf("Returned value %d - \n", (int)status);

	switch(ret) {
	case 0:
		printf("The thread joined successfully\n");
		break;
	case EDEADLK:
		printf("Deadlock detected\n");
		break;
	case EINVAL:
		printf("The thread is not joinable\n");
		break;
	case ESRCH:
		printf("No thread with given ID is found\n");
		break;
	default:
		printf("Error occurred when joining the thread\n");
		break;
	}

	bWorkingUart =0;

	//pthread_exit(NULL);
	printf("Exit_Uart_Thread() : [%d] \n", (int)status);

}

void timer_handler(int signum)
{
    printf("Uart Read expired \t");

}

int UartComThread::uart_SetTimer()
{
	struct sigaction sa;
	struct itimerval timer;

	memset(&sa, 0, sizeof(sa));
	sa.sa_handler = &timer_handler;
	sigaction(SIGVTALRM, &sa, NULL);

	//timer.it_interval.tv_sec = 0;
	//timer.it_interval.tv_usec = 0;

	timer.it_value.tv_sec = 1;
	timer.it_value.tv_usec = 0;

	setitimer(ITIMER_VIRTUAL, &timer, NULL);
	iTimerFlag =1;

	return 1;
}
int UartComThread::uart_init()
{
	m_uartd = Uart_Open("/dev/ttyS1", 230400);

	if(m_uartd <= 0)
		return 0;
	return 1;
}

int UartComThread::Create_Uart_thread(pthread_t thread)
{
	int rc=0, status;

	mthreads = thread;
	rc = pthread_create(&mthreads, NULL, uart_Rx_Thread, (void *)m_uartd);

	printf("uart_thread init m_uartd, %d rc %d\n", m_uartd, rc);
	wait(&status);
	if (rc) {
		printf("Error:unable to create thread, %d\n", rc);
		exit(-1);
	}
	bWorkingUart = 1;
	return 1;
}

int UartComThread::Uart_Open(const char *dev, int baud_rate)
{
	uart_ctx_t* ctx = NULL;
	if(!dev)	return 0;
	pthread_mutex_init(&mutex2, NULL);
	ctx = (uart_ctx_t*)malloc(sizeof(uart_ctx_t));

	if(ctx) {
		printf("Uart_Open baud_rate :%d\n", baud_rate);
		memset(ctx, 0, sizeof(uart_ctx_t));

		ctx->fd = Open_fd(dev);
		printf("Uart_Open ctx->fd : %d\n", ctx->fd);
		if(ctx->fd <= 0) {
			printf("Uart_Close\n");
			Uart_Close((int)ctx);
			return 0;
		}
		Uart_Config(ctx, baud_rate);
	}
	return (int)ctx;

}

int UartComThread::Uart_Close(int uartd)
{
	void* result;
	int status;
	uart_ctx_t *ctx = (uart_ctx_t *)uartd;

	if(ctx) {
		if(ctx->fd > 0) {
			tcsetattr(ctx->fd, TCSANOW, &ctx->oldtio);
			close(ctx->fd);
			ctx->fd =0;
		}
		free(ctx);
	}
	pthread_join(mthreads, &result);
	wait(&status);
	printf("pthread_join UART result : %d\n", (int)result);

	return 1;
}

int UartComThread::Uart_Config(uart_ctx_t* ctx, int baudrate)
{
	if(!ctx || (ctx->fd <= 0)) return -1;
	tcgetattr(ctx->fd, &ctx->oldtio);		//save current port setting.

	//set new port Setting
	switch(baudrate)
	{
	case 9600:
		ctx->newtio.c_cflag = B9600;
		break;
	case 115200:
		ctx->newtio.c_cflag = B115200;
		break;
	case 230400:
		ctx->newtio.c_cflag = B230400;
		break;
	case  460800:
		ctx->newtio.c_cflag = B460800;
		break;
	case 921600:
		ctx->newtio.c_cflag = B921600;
		break;
	}

	ctx->newtio.c_cflag |= (CS8 | CLOCAL | CREAD);
	ctx->newtio.c_iflag = IGNPAR /*| ICRNL*/;
	ctx->newtio.c_oflag = 0;
	ctx->newtio.c_lflag = ~(ICANON | ECHO | ECHOE | ISIG);

	tcflush(ctx->fd, TCIFLUSH);
	tcsetattr(ctx->fd, TCSANOW, &ctx->newtio);
	return 0;

}

int UartComThread::Open_fd(const char *dev)
{
	int fd =0;
	if(!dev) return -1;

	 fd = open(dev, O_RDWR | O_NOCTTY | O_NONBLOCK);
	 printf("Open_fd %d\n", fd);
	if (fd < 0) {
		fprintf(stderr, "ERR\n");
		exit(-1);
	}

	return fd;
}

int UartComThread::Ready_to_Read(int uartd, int timeoutms)
{
	uart_ctx_t* ctx = (uart_ctx_t *)uartd;

	if(!ctx) return -1;

	//printf("Ready_to_Read ctx->fd : %d\n", ctx->fd);
	pthread_mutex_lock(&ctx->mutex);
	if(Uart_fd_Select(ctx->fd, timeoutms,0) == ctx->fd) {
	//	printf("Ready_to_Read return 1\n");
		pthread_mutex_unlock(&ctx->mutex);
		return 1;
	}
	pthread_mutex_unlock(&ctx->mutex);
	return 0;

}

int UartComThread::Ready_to_Write(int uartd, int timeoutms)
{
	uart_ctx_t* ctx = (uart_ctx_t *)uartd;

	if(!ctx) return -1;

	pthread_mutex_lock(&ctx->mutex);
	if(Uart_fd_Select(ctx->fd, timeoutms, 1) == ctx->fd) {
		pthread_mutex_unlock(&ctx->mutex);
		return 1;
	}
	pthread_mutex_unlock(&ctx->mutex);
	return 0;

}

int UartComThread::Uart_Read(int uartd, uint8_t* data, int size)
{
	int readlen =0;
	uart_ctx_t* ctx = (uart_ctx_t *)uartd;

	if(!ctx || ctx->fd <= 0 || !data || size <= 0) return 0;
	readlen = read(ctx->fd, data, size*sizeof(uint8_t));

	iTimerFlag =1;
	return readlen;
}

int UartComThread::Uart_Write(int uartd, uint8_t* data, int size)
{
	int wrotelen =0;
	int failcnt =0;
	uart_ctx_t* ctx = (uart_ctx_t *)uartd;
	if(!ctx || ctx->fd <= 0 || !data || size <= 0) return 0;

	printf("Uart");
	pthread_mutex_lock(&ctx->mutex);
	while(wrotelen < size && failcnt < 5) {
		int ret  =0;
		int towritelen = size - wrotelen;
		uint8_t* ptr = data + wrotelen;
			ret = write(ctx->fd, ptr, towritelen*sizeof(uint8_t));
			if(ret > 0) {
				printf("_Write ");
		//		for(int i=0; i<size; i++) {
		//			printf("%x ", ptr[i]);
		//		}
				printf(" End\n");
				wrotelen += ret;
			}
			else {
				printf("failcnt : %d", failcnt);
				failcnt++;
			}
	}
	pthread_mutex_unlock(&ctx->mutex);

	return wrotelen;

}

int UartComThread::Uart_fd_Select(int fd, int timeout_ms, int rw)
{
	fd_set	io_fds;
	int retval =0;
	struct timeval timeout;

	if(fd<=0) return -1;
	if(timeout_ms < 0) timeout_ms =0;

	FD_ZERO(&io_fds);
	//FD_SET(STDIN_FILENO, &io_fds);
	FD_SET(fd, &io_fds);

	timeout.tv_sec =0;
	timeout.tv_usec = 1000*timeout_ms;

	if(rw)
		retval = select(fd+1, 0, &io_fds,0,&timeout);		//write
	else
		retval = select(fd+1, &io_fds, 0,0,&timeout);		//read

	if(retval == -1) {
		return -1;
	}
	else if(retval == 0) {
		//printf("Uart_fd_Select timeout\n");
	}

	if(FD_ISSET(fd,&io_fds)) {
		return fd;
	}

	return -1;

}

BYTE UartComThread::Uart_GetChecksum(BYTE* puData, int len)
{
	BYTE sum =0;

	for(int i=1; i< len; i++) {
	//	printf("%x ", puData[i]);
		sum += puData[i];
	}
	//printf("(check nsum : %x) ", sum);

	return sum;
}


void UartComThread::InsertArray(int idx, WORD sz, WORD* ar)
{
	WORD arr[4096];
	memcpy(arr, ar, 4096);
	int size = (sizeof(arr)/sizeof(*arr));
	memmove(ar+idx+1, ar+idx, size-idx+1);
	ar[idx] = sz;
	//printf("Insert [%d]%x, size : %d\n", idx, ar[idx], size);
}

void UartComThread::AppendArray(WORD sz, int idx, WORD* ar)
{
	InsertArray(idx, sz, ar);
}

void UartComThread::Uart_deleteArray(int idx, int size, WORD* ar)
{
	memmove(ar+idx, ar+idx+1, size-idx);
}


void UartComThread::SetMutex(pthread_mutex_t mutex)
{
	uart_ctx_t *ctx = (uart_ctx_t *)m_uartd;
	ctx->mutex = mutex;
}

void UartComThread::SetMsgQueue(MsgQueue* msg)
{
	pMsgQueue = msg;
}

void UartComThread::SetUartComm(UartComThread* msg)
{
	mpComm = msg;
}



